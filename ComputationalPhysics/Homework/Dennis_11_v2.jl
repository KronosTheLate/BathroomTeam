if occursin("dennishb", homedir())
    using Pkg
    Pkg.activate("ComputationalPhysics", shared=true)
end
using LinearAlgebra
using Symbolics
using GLMakie; Makie.inline!(true)
update_theme!(resolution=(800, 800))
##
ùí¢_Œ¶(x, x·∂•, y, y·∂•) = -1/4œÄ * log((x-x·∂•)^2 + (y-y·∂•)^2)

let #¬§ Symbolic computation of ùí¢_Ex and ùí¢_Ey
    @variables x x·∂• y y·∂•
    Dx = Differential(x)
    Dy = Differential(y)
    ùí¢_Œ¶_expr = ùí¢_Œ¶(x, x·∂•, y, y·∂•)
    @variables x x·∂• y y·∂•
    Dx = Differential(x)
    Dy = Differential(y)

    ùí¢_Ex_expr = -Dx(ùí¢_Œ¶_expr) |> expand_derivatives
    ùí¢_Ex_temp = build_function(ùí¢_Ex_expr, [x x·∂• y y·∂•])|>eval
    global ùí¢_Ex(x, x·∂•, y, y·∂•) = ùí¢_Ex_temp([x, x·∂•, y, y·∂•])

    ùí¢_Ey_expr = -Dy(ùí¢_Œ¶_expr) |> expand_derivatives
    ùí¢_Ey_temp = build_function(ùí¢_Ey_expr, [x x·∂• y y·∂•])|>eval
    global ùí¢_Ey(x, x·∂•, y, y·∂•) = ùí¢_Ey_temp([x, x·∂•, y, y·∂•])
end

function parameters(;N_mesh, N_points=10, a=1, b=1, shape=:circle)
    xmin, xmax = -2, 2
    xs = range(xmin, xmax, N_mesh)
    ymin, ymax = -2, 2
    ys = range(ymin, ymax, N_mesh)
    if shape==:circle
        points = [[cos(c), sin(c)] for c in range(0, 2œÄ, N_points+1)[begin:end-1]]
    else
        throw(ArgumentError("Keyword argument `shape` not set to a valid value."))
    return (;N_mesh, N_points, xs, ys, points, a, b)
end

##¬§ a1) Plot the potential, E-field intensity, and E-field components
#¬§      for a point charge at x=1, y=0
let
    p = parameters(N_mesh=100)
    (;N_mesh, xs, ys) = p
    x·∂• = 1
    y·∂• = 0
    ùí¢s = [ùí¢_Œ¶(x, x·∂•, y, y·∂•) for x in xs, y in ys]
    ùí¢_Exs = [ùí¢_Ex(x, x·∂•, y, y·∂•) for x in xs, y in ys]
    ùí¢_Eys = [ùí¢_Ey(x, x·∂•, y, y·∂•) for x in xs, y in ys]
    ùí¢_Es_mag = hypot.(ùí¢_Exs, ùí¢_Eys)
    fig = Figure()
    ax, hm = heatmap(fig[1, 1], xs, ys, ùí¢s, axis=(title="Œ¶", aspect=1, xlabel="x", ylabel="y"))
    Colorbar(fig[1, 2], hm)
    ax2, hm2 = heatmap(fig[1, 3], xs, ys, ùí¢_Es_mag, axis=(title="|E|", aspect=1, xlabel="x", ylabel="y"))
    Colorbar(fig[1, 4], hm2)
    ax3, hm3 = heatmap(fig[2, 1], xs, ys, ùí¢_Exs, axis=(title="E_x", aspect=1, xlabel="x", ylabel="y"))
    Colorbar(fig[2, 2], hm3)
    ax4, hm4 = heatmap(fig[2, 3], xs, ys, ùí¢_Eys, axis=(title="E_y", aspect=1, xlabel="x", ylabel="y"))
    Colorbar(fig[2, 4], hm4)
    colsize!(fig.layout, 1, Aspect(1, 1))
    colsize!(fig.layout, 3, Aspect(1, 1))
    resize_to_layout!(fig)
    display(fig)
end

##¬§ a2)
Œ¶_ext_func(x, y, p) = p.a*x + p.b*y
E_ext_x_func(x, p) = -p.a
E_ext_y_func(y, p) = -p.b

#¬§ Other funcs
Œ¶_int_func(x, y, œÅs, p) = sum(œÅs[i]*ùí¢_Œ¶(x, p.points[i][1], y, p.points[i][2]) for i in eachindex(p.points))
E_int_x_func(x, y, œÅs, p) = sum(œÅs[i]*ùí¢_Ex(x, p.points[i][1], y, p.points[i][2]) for i in eachindex(p.points))
E_int_y_func(x, y, œÅs, p) = sum(œÅs[i]*ùí¢_Ey(x, p.points[i][1], y, p.points[i][2]) for i in eachindex(p.points))

Œ¶_tot_func(x, y, œÅs, p) = Œ¶_ext_func(x, y, p) + Œ¶_int_func(x, y, œÅs, p)
E_tot_x_func(x, y, œÅs, p) = E_ext_x_func(x, p) + E_int_x_func(x, y, œÅs, p)
E_tot_y_func(x, y, œÅs, p) = E_ext_y_func(y, p) + E_int_y_func(x, y, œÅs,p )
E_tot_mag_func(x, y, œÅs, p) = hypot(E_tot_x_func(x, y, œÅs, p), E_tot_y_func(x, y, œÅs, p))

function œÅs_func(p)
    b‚Éó = [-Œ¶_ext_func(p.points[i][1], p.points[i][2], p) for i in eachindex(p.points)]
    M = [i==j ? 0.0 : ùí¢_Œ¶(p.points[i][1], p.points[j][1], p.points[i][2], p.points[j][2]) for i in eachindex(p.points), j in eachindex(p.points)]# .|> ComplexF64
    M = issymmetric(M) ? Symmetric(M) : M
    œÅs = M \ b‚Éó
    return œÅs
end
function plot_potential(Œ¶_ext, Œ¶_int, Œ¶_tot, œÅs, p)
    (;xs, ys) = p
    fig = Figure()
    Label(fig[0, 1:4], rich("Potential plots", font=:bold, fontsize=30))
    
    ax = Axis(fig[1, 1], aspect=1)
    hm = heatmap!(ax, xs, ys, Œ¶_tot)
    plt = scatter!(ax, Point2f.(p.points), marker=[œÅ‚â•0 ? '+' : '-' for œÅ in œÅs], markersize=40 .* abs.(normalize(œÅs, Inf)), color=[œÅ‚â•0 ? :red : :blue for œÅ in œÅs])
    Colorbar(fig[1, 2], hm, label="Œ¶_tot")

    ax2 = Axis(fig[1, 3], aspect=1)
    hm2 = heatmap!(ax2, xs, ys, Œ¶_tot.|>abs.|>log10)
    Colorbar(fig[1, 4], hm2, label="log(|Œ¶_tot|)")

    ax3 = Axis(fig[2, 1], aspect=1)
    hm3 = heatmap!(ax3, xs, ys, Œ¶_ext, colorrange=(-3, 3))
    Colorbar(fig[2, 2], hm3, label="Œ¶_ext")

    ax4 = Axis(fig[2, 3], aspect=1)
    hm4 = heatmap!(ax4, xs, ys, Œ¶_int, colorrange=(-3, 3))
    Colorbar(fig[2, 4], hm4, label="Œ¶_int")
    colsize!(fig.layout, 1, Aspect(1, 1))
    colsize!(fig.layout, 3, Aspect(1, 1))
    resize_to_layout!(fig)
    display(fig)
end

function plot_E_field(E_tot_x, E_tot_y, E_tot_mag, œÅs, p)
    (;xs, ys, points) = p
    fig = Figure()
    Label(fig[0, 1:4], rich("E-field plots", font=:bold, fontsize=30))
    
    ax = Axis(fig[1, 1], aspect=1)
    hm = heatmap!(ax, xs, ys, E_tot_mag, colorrange=(0, 5))
    plt = scatter!(ax, Point2f.(points), marker=[œÅ‚â•0 ? '+' : '-' for œÅ in œÅs], markersize=40 .* abs.(normalize(œÅs, Inf)), color=[œÅ‚â•0 ? :red : :blue for œÅ in œÅs])
    Colorbar(fig[1, 2], hm, label="|E_tot|")

    ax2 = Axis(fig[1, 3], aspect=1)
    hm2 = heatmap!(ax2, xs, ys, E_tot_mag.|>log10)
    Colorbar(fig[1, 4], hm2, label="log(|E_tot|)")

    ax3 = Axis(fig[2, 1], aspect=1)
    hm3 = heatmap!(ax3, xs, ys, E_tot_x, colorrange=(-3, 3))
    Colorbar(fig[2, 2], hm3, label="E_tot_x")

    ax4 = Axis(fig[2, 3], aspect=1)
    hm4 = heatmap!(ax4, xs, ys, E_tot_y, colorrange=(-3, 3))
    Colorbar(fig[2, 4], hm4, label="E_tot_y")

    colsize!(fig.layout, 1, Aspect(1, 1))
    colsize!(fig.layout, 3, Aspect(1, 1))
    resize_to_layout!(fig)
    display(fig)
end
##
let     
    #¬§ b)
    p = parameters(N_mesh=100, N_points=100, a=1, b=0)
    (;N_mesh, N_points, xs, ys, points) = p
    œÅs = œÅs_func(p)

    Œ¶_ext = [Œ¶_ext_func(x, y, p) for x in xs, y in ys]
    Œ¶_int = [Œ¶_int_func(x, y, œÅs, p) for x in xs, y in ys]
    Œ¶_tot = Œ¶_ext .+ Œ¶_int  #[Œ¶_tot_func(x, y, œÅs, p) for x in xs, y in ys]

    E_tot_x = [E_tot_x_func(x, y, œÅs, p) for x in xs, y in ys]
    E_tot_y = [E_tot_y_func(x, y, œÅs, p) for x in xs, y in ys]
    E_tot_mag = hypot.(E_tot_x, E_tot_y)    #[E_tot_mag_func(x, y, œÅs, p) for x in xs, y in ys]

    plot_potential(Œ¶_ext, Œ¶_int, Œ¶_tot, œÅs, p)
    plot_E_field(E_tot_x, E_tot_y, E_tot_mag, œÅs, p)
    
end

##¬§ Convergence